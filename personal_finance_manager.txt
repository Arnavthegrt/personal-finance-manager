import tkinter as tk
from tkinter import messagebox, simpledialog
from experta import KnowledgeEngine, Fact, Rule, Field, DefFacts, MATCH, TEST

# Define the facts
class FinancialSituation(Fact):
    income = Field(float, mandatory=True)
    expense = Field(float, mandatory=True)

# Create the Finance Knowledge Engine with rules
class FinanceEngine(KnowledgeEngine):
    def __init__(self, gui_root):
        super().__init__()
        self.gui_root = gui_root  # Reference to the main GUI window
        self.invest_amount = None  # To store the investment amount entered in the GUI

    @DefFacts()
    def _initial_action(self):
        yield Fact()  # Empty fact to satisfy the generator requirement
    
    @Rule(FinancialSituation(income=MATCH.income, expense=MATCH.expense),
          TEST(lambda income, expense: 40 < (expense / income) * 100 <= 80))
    def advise_fd_ppf(self, income, expense):
        self.declare(Fact(advice="Consider investing in FD and PPF."))
    
    @Rule(FinancialSituation(income=MATCH.income, expense=MATCH.expense),
          TEST(lambda income, expense: 80 < (expense / income) * 100 <= 100))
    def advise_save_more(self, income, expense):
        self.declare(Fact(advice="Try saving more first."))
    
    @Rule(FinancialSituation(income=MATCH.income, expense=MATCH.expense),
          TEST(lambda income, expense: 20 < (expense / income) * 100 <= 40))
    def advise_mutual_stock(self, income, expense):
        investable_amount = income - expense
        self.invest_amount = self.ask_investment_amount(investable_amount)
        
        if self.invest_amount <= investable_amount:
            mf_invest = self.invest_amount * 0.60
            stock_invest = self.invest_amount * 0.40
            advice = (f"Invest {mf_invest:.2f} in Mutual Funds and {stock_invest:.2f} in Midcap/Largecap Stocks.")
            self.declare(Fact(advice=advice))
        else:
            self.declare(Fact(advice="Investment amount exceeds available funds."))

    @Rule(FinancialSituation(income=MATCH.income, expense=MATCH.expense),
          TEST(lambda income, expense: (expense / income) * 100 <= 20))
    def advise_gold_bond_microcap(self, income, expense):
        investable_amount = income - expense
        self.invest_amount = self.ask_investment_amount(investable_amount)
        
        if self.invest_amount <= investable_amount:
            gold_bond_invest = self.invest_amount * 0.30
            stock_invest = self.invest_amount * 0.50
            mf_invest = self.invest_amount * 0.20
            advice = (f"Invest {gold_bond_invest:.2f} in Gold/Bonds, {stock_invest:.2f} in Microcap Stocks, and {mf_invest:.2f} in Mutual Funds.")
            self.declare(Fact(advice=advice))
        else:
            self.declare(Fact(advice="Investment amount exceeds available funds."))

    # Function to ask for investment amount via a GUI input dialog
    def ask_investment_amount(self, max_amount):
        return simpledialog.askfloat("Investment Amount",
                                     f"Enter the amount to invest (Max: {max_amount:.2f}):",
                                     parent=self.gui_root, minvalue=0, maxvalue=max_amount)

# Initialize Tkinter Application
root = tk.Tk()
root.title("AI-Powered Personal Finance Manager")
root.geometry("800x400")  # Adjust window size for the UI layout

# Center frame for form elements and layout styling
frame = tk.Frame(root, bg="white", bd=2, relief=tk.SOLID, padx=20, pady=20)
frame.place(relx=0.5, rely=0.5, anchor="center")  # Center the frame in the window

# Title label
title_label = tk.Label(frame, text="Personal Finance Manager", font=("Helvetica", 16), bg="green", fg="white", pady=10, padx=20)
title_label.grid(row=0, column=0, columnspan=2)

# Income input
income_label = tk.Label(frame, text="Monthly Income:", font=("Arial", 12), bg="white")
income_label.grid(row=1, column=0, sticky="e", pady=10)
income_entry = tk.Entry(frame, font=("Arial", 12))
income_entry.grid(row=1, column=1)

# Expense input
expense_label = tk.Label(frame, text="Monthly Expenses:", font=("Arial", 12), bg="white")
expense_label.grid(row=2, column=0, sticky="e", pady=10)
expense_entry = tk.Entry(frame, font=("Arial", 12))
expense_entry.grid(row=2, column=1)

# Age input
age_label = tk.Label(frame, text="Age:", font=("Arial", 12), bg="white")
age_label.grid(row=3, column=0, sticky="e", pady=10)
age_entry = tk.Entry(frame, font=("Arial", 12))
age_entry.grid(row=3, column=1)

# Function to calculate advice using the FinanceEngine expert system
def calculate_advice():
    try:
        # Capture the input values
        age = int(age_entry.get())  # Capturing the age but not using it
        income = float(income_entry.get())
        expense = float(expense_entry.get())

        # Validate the input
        if income <= 0 or expense < 0:
            messagebox.showerror("Input Error", "Please enter valid income and expense values.")
            return
        
        # Instantiate the expert system and reset it
        engine = FinanceEngine(root)  # Pass the main root to the expert system
        engine.reset()

        # Declare the financial situation as a fact and run the engine
        engine.declare(FinancialSituation(income=income, expense=expense))
        engine.run()
        
        # Extract advice from engine facts
        for fact in engine.facts.values():
            if isinstance(fact, Fact) and "advice" in fact:
                messagebox.showinfo("Investment Advice", fact["advice"])
                break
        else:
            messagebox.showinfo("Investment Advice", f"Please enter expense less than: {income}")
        
    except ValueError as e:
        messagebox.showerror("Input Error", f"Invalid input: {e}")

# Button to trigger advice calculation
calculate_button = tk.Button(frame, text="Get Financial Advice", font=("Arial", 12), command=calculate_advice, bg="white", relief=tk.SOLID)
calculate_button.grid(row=4, column=0, columnspan=2, pady=20)

# Run the Tkinter event loop
root.mainloop()